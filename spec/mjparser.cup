

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)  
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, ENUM, CONST, PRINT, READ, RETURN, VOID, NEW;
terminal DO, WHILE;
terminal LBRACE, RBRACE, SEMI, LPAREN, RPAREN, LBRACKET, RBRACKET, QMARK, COLON;

terminal PLUS, MINUS, MUL, DIV, MOD;
terminal EQ, NEQ, GT, GTEQ, LT, LTEQ;
terminal AND, OR, EQUAL, INC, DEC;
terminal COMMA, POINT;

terminal Integer NUMBER;
terminal String BOOL;
terminal Character CHAR;
terminal String IDENT;
terminal IF, ELSE;

terminal SWITCH, CASE, BREAK, CONTINUE, CLASS, EXTENDS;

nonterminal MethodDeclList;
nonterminal FormalParamList, FormalParamDecl, FormPars, ActualPars, ActualParamList, RetType; 
nonterminal StatementList, Statement, Addop, Muloper, Assignop, Relop, Minus;

nonterminal DesignatorStatement;
nonterminal DeclList, VarDecl, ConstDeclList, ConstDecl, ConstName;

nonterminal MethodDecl; 


nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, VarDeclList, Expr, Factor, Term, TermSum, CondFact, CondTerm, Condition;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodTypeName;

nonterminal BasicTypes;

precedence left ELSE;

Program ::= (Program) PROG ProgName:p DeclList LBRACE MethodDeclList RBRACE ;

ProgName ::= (ProgName) IDENT:progName;


DeclList ::= (ASTVarDeclList) DeclList Type VarDeclList:varDeclList SEMI
	| 
	 (ASTConstDeclList) DeclList CONST Type ConstDeclList SEMI
	|
	 (NoSpecDecl) /* epsilon */
	;

VarDeclList ::= (MoreVarDecls) VarDeclList COMMA VarDecl:varDecl
	|
	(SingleVarDecl) VarDecl:varDecl
	;
		
		
VarDecl ::= (ASTVarDecl) IDENT:var
	|
	(ArrayDecl) IDENT:var LBRACKET RBRACKET
	;



ConstDeclList ::= (MoreConstDecls) ConstDeclList COMMA ConstDecl 
		| 
		  (SingleConstDecl) ConstDecl
		;
		


ConstDecl ::= (ConstDecl) ConstName EQUAL BasicTypes;


ConstName ::= (ConstName)  IDENT:var;

MethodDeclList ::= (ASTMethodDecList) MethodDeclList MethodDecl
				|
					(NoMethodDecl)	/* epsilon */
				;
			
MethodDecl ::= (MethodDecl)	MethodTypeName LPAREN FormPars RPAREN DeclList LBRACE StatementList RBRACE ;


MethodTypeName ::= (MethodTypeName) RetType:retType IDENT:methName;


RetType ::= (ActualType) Type 
			|
			(NoType) VOID
			;
			
			
FormPars ::= (FormParams) FormalParamList
		|
			(NoFormParams)	/* epsilon */
		;
		
		
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl 
				|
					(SingleFormalParamDecl) FormalParamDecl
				;

FormalParamDecl ::= (ASTFormalParamDecl) Type IDENT
				|
					(ArrParamDecl) Type IDENT LBRACKET RBRACKET
				;


Type ::= (Type) IDENT:typeName;



StatementList ::= (StmtList) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;

Statement ::= (DesignatorStmt) DesignatorStatement SEMI
				|
				  (IfStatement) IF LPAREN Condition RPAREN Statement
				|
				  (IfElseStatement) IF LPAREN Condition RPAREN Statement ELSE Statement
				|
				  (ReturnExpr) RETURN Expr SEMI
				|
				  (ReturnNoExpr) RETURN SEMI
				|
				  (ReadStmt) READ LPAREN Designator RPAREN SEMI
				| 
				  (PrintStmt) PRINT LPAREN Expr RPAREN SEMI
				|
				  (PrintStmtNum) PRINT LPAREN Expr COMMA NUMBER:width RPAREN SEMI
				|
				  (SurroundStmt) LBRACE StatementList RBRACE
				;
				
			
DesignatorStatement ::= (AssignStmt) Designator:dest Assignop Expr:e
				|
					(FuncCall) Designator:fun LPAREN ActualPars RPAREN
				|
					(Increment) Designator INC
				|
					(Decrement) Designator DEC
				;


ActualPars ::= (Actuals) ActualParamList
				|
				(NoActuals) /* epsilon */
				;
			
ActualParamList ::= (ActualParList) ActualParamList COMMA Expr
				|
					(ActualParam) Expr
				;
				
				
Condition ::= (MulCondTerms) Condition OR CondTerm
			| 
			(SingleCondTerm) CondTerm
			;
	
CondTerm ::= (MulCondFacts) CondTerm AND CondFact
			|
			(SingleCondFact) CondFact
			;
		
CondFact ::= (CondFactRel) Expr Relop Expr
			|
			 (ASTCondFact) Expr:expr
			;
				

Expr ::= (OpExpr) TermSum
		|
		 (NegOpExpr) Minus TermSum 
		;
		

Minus ::= (Minus) MINUS;		
		

TermSum ::= (SumTerm) TermSum Addop Term
		|
			(SingleTerm) Term
		;


Term ::=  (MulFactors) Term Muloper Factor
		|
		  (SingleFactor) Factor
		;
		
		
Factor ::= (Var) Designator:d 
		|
			(FuncCallPars) Designator:func LPAREN ActualPars RPAREN
		|
		 	(NumConst) NUMBER 
		| 
			(CharConst) CHAR 
		|
			(BoolConst) BOOL 
		|
			(NewArray) NEW Type LBRACKET Expr RBRACKET
		|
			(ExprInParens) LPAREN Expr RPAREN
		;
		

 
Designator ::= (ASTDesignator) IDENT:name 
			|	
			   (DesignatorArray)  IDENT:name LBRACKET Expr RBRACKET
			;


Assignop ::= (Assignop) EQUAL ;


Relop ::= (CompEqual) EQ
		|
		  (NotEqual) NEQ
		| 
		  (GreaterThan) GT
		| 
		  (GtEqual) GTEQ
		|
		  (LessThan) LT
		|
		  (LsEqual) LTEQ
		;

Addop ::= (PlusOp) PLUS
		|
		  (MinusOp) MINUS
		;

		
Muloper ::= (Mulop) MUL
		|
		  (Divop) DIV
		|
		  (Modop) MOD
		;



BasicTypes ::= (ASTNumber) NUMBER:numConst
			|
			(ASTBoolean) BOOL:boolConst
			| 
			(ASTCharacter) CHAR:charConst
			;

