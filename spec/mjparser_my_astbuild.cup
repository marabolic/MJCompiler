

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)  
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, ENUM, CONST, PRINT, READ, RETURN, VOID, NEW;
terminal DO, WHILE;
terminal LBRACE, RBRACE, SEMI, LPAREN, RPAREN, LBRACKET, RBRACKET, QMARK, COLON;

terminal PLUS, MINUS, MUL, DIV, MOD;
terminal EQ, NEQ, GT, GTEQ, LT, LTEQ;
terminal AND, OR, EQUAL, INC, DEC;
terminal COMMA, POINT;

terminal Integer NUMBER;
terminal String BOOL;
terminal Character CHAR;
terminal String IDENT;
terminal IF, ELSE;

terminal SWITCH, CASE, BREAK, CONTINUE, CLASS, EXTENDS;

nonterminal MethodDeclList MethodDeclList;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal FormPars FormPars;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList;
nonterminal RetType RetType; 
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal Addop Addop;
nonterminal Muloper Muloper;
nonterminal Assignop Assignop;
nonterminal Relop Relop;

nonterminal DesignatorStatement DesignatorStatement;
nonterminal DeclList DeclList;
nonterminal VarDeclList VarDeclList;
nonterminal VarDecl VarDecl;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstDecl ConstDecl;

nonterminal MethodDecl MethodDecl; 
nonterminal Term Term;
nonterminal Expr Expr;
nonterminal Factor Factor;
nonterminal TermSum TermSum; 
nonterminal Condition Condition;
nonterminal CondTerm CondTerm;
nonterminal CondFact CondFact;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator;

nonterminal BasicTypes BasicTypes;

precedence left ELSE;

Program ::= (Program) PROG ProgName:p DeclList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :} ;

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};


DeclList ::= (ASTVarDeclList) DeclList:D1 Type:T2 VarDeclList:V3 SEMI {: RESULT=new ASTVarDeclList(D1, T2, V3); RESULT.setLine(D1left); :}
	| 
	 (ASTConstDeclList) DeclList:D1 CONST Type:T2 ConstDeclList:C3 SEMI {: RESULT=new ASTConstDeclList(D1, T2, C3); RESULT.setLine(D1left); :}
	|
	 (NoSpecDecl) {: RESULT=new NoSpecDecl(); :} /* epsilon */
	;

VarDeclList ::= (MoreVarDecls) VarDeclList:V1 COMMA VarDecl:V2 {: RESULT=new MoreVarDecls(V1, V2); RESULT.setLine(V1left); :}
	|
	(SingleVarDecl) VarDecl:V1 {: RESULT=new SingleVarDecl(V1); RESULT.setLine(V1left); :}
	;
		
		
VarDecl ::= (ASTVarDecl) IDENT:var {: RESULT=new ASTVarDecl(var); RESULT.setLine(varleft); :}
	|
	(ArrayDecl) IDENT:I1 LBRACKET RBRACKET {: RESULT=new ArrayDecl(I1); RESULT.setLine(I1left); :}
	;



ConstDeclList ::= (MoreConstDecls) ConstDeclList:C1 COMMA ConstDecl:C2 {: RESULT=new MoreConstDecls(C1, C2); RESULT.setLine(C1left); :} 
		| 
		  (SingleConstDecl) ConstDecl:C1 {: RESULT=new SingleConstDecl(C1); RESULT.setLine(C1left); :}
		;
		


ConstDecl ::= (ConstDecl) IDENT:I1 EQUAL BasicTypes:B2 {: RESULT=new ConstDecl(I1, B2); RESULT.setLine(I1left); :};




MethodDeclList ::= (ASTMethodDecList) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new ASTMethodDecList(M1, M2); RESULT.setLine(M1left); :}
				|
					(NoMethodDecl) {: RESULT=new NoMethodDecl(); :}	/* epsilon */
				;
			
MethodDecl ::= (MethodDecl)	RetType:retType IDENT:methName LPAREN FormPars:F1 RPAREN DeclList:D2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethodDecl(retType, methName, F1, D2, S3); RESULT.setLine(retTypeleft); :} ;


RetType ::= (ActualType) Type:T1 {: RESULT=new ActualType(T1); RESULT.setLine(T1left); :} 
			|
			(NoType) VOID {: RESULT=new NoType(); :}
			;
			
			
FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :}
		|
			(NoFormParams) {: RESULT=new NoFormParams(); :}	/* epsilon */
		;
		
		
FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :} 
				|
					(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
				;

FormalParamDecl ::= (ASTFormalParamDecl) Type:T1 IDENT:I2 {: RESULT=new ASTFormalParamDecl(T1, I2); RESULT.setLine(T1left); :}
				|
					(ArrParamDecl) Type:T1 IDENT:I2 LBRACKET RBRACKET {: RESULT=new ArrParamDecl(T1, I2); RESULT.setLine(T1left); :}
				;


Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};



StatementList ::= (StmtList) StatementList:S1 Statement:S2 {: RESULT=new StmtList(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				;

Statement ::= (DesignatorStmt) DesignatorStatement:D1 SEMI {: RESULT=new DesignatorStmt(D1); RESULT.setLine(D1left); :}
				|
				  (IfStatement) IF LPAREN Condition:C1 RPAREN Statement:S2 {: RESULT=new IfStatement(C1, S2); RESULT.setLine(C1left); :}
				|
				  (IfElseStatement) IF LPAREN Condition:C1 RPAREN Statement:S2 ELSE Statement:S3 {: RESULT=new IfElseStatement(C1, S2, S3); RESULT.setLine(C1left); :}
				|
				  (ReturnExpr) RETURN Expr:E1 SEMI {: RESULT=new ReturnExpr(E1); RESULT.setLine(E1left); :}
				|
				  (ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
				|
				  (ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
				| 
				  (PrintStmt) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :}
				|
				  (PrintStmtNum) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new PrintStmtNum(E1, N2); RESULT.setLine(E1left); :}
				|
				  (SurroundStmt) LBRACE StatementList:S1 RBRACE {: RESULT=new SurroundStmt(S1); RESULT.setLine(S1left); :}
				;
				
			
DesignatorStatement ::= (AssignStmt) Designator:dest Assignop:A1 Expr:e {: RESULT=new AssignStmt(dest, A1, e); RESULT.setLine(destleft); :}
				|
					(FuncCall) Designator:fun LPAREN ActualPars:A1 RPAREN {: RESULT=new FuncCall(fun, A1); RESULT.setLine(funleft); :}
				|
					(Increment) Designator:D1 INC {: RESULT=new Increment(D1); RESULT.setLine(D1left); :}
				|
					(Decrement) Designator:D1 DEC {: RESULT=new Decrement(D1); RESULT.setLine(D1left); :}
				;


ActualPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :}
				|
				(NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */
				;
			
ActualParamList ::= (ActualParList) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParList(A1, E2); RESULT.setLine(A1left); :}
				|
					(ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
				;
				
				
Condition ::= (MulCondTerms) Condition:C1 OR CondTerm:C2 {: RESULT=new MulCondTerms(C1, C2); RESULT.setLine(C1left); :}
			| 
			(SingleCondTerm) CondTerm:C1 {: RESULT=new SingleCondTerm(C1); RESULT.setLine(C1left); :}
			;
	
CondTerm ::= (MulCondFacts) CondTerm:C1 AND CondFact:C2 {: RESULT=new MulCondFacts(C1, C2); RESULT.setLine(C1left); :}
			|
			(SingleCondFact) CondFact:C1 {: RESULT=new SingleCondFact(C1); RESULT.setLine(C1left); :}
			;
		
CondFact ::= (CondFactRel) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFactRel(E1, R2, E3); RESULT.setLine(E1left); :} 
			|
			 (ASTCondFact) Expr:E1 {: RESULT=new ASTCondFact(E1); RESULT.setLine(E1left); :} 
			;
				

Expr ::= (OpExpr) TermSum:T1 {: RESULT=new OpExpr(T1); RESULT.setLine(T1left); :}
		|
		 (NegOpExpr) MINUS TermSum:T1 {: RESULT=new NegOpExpr(T1); RESULT.setLine(T1left); :} 
		;
		

TermSum ::= (SumTerm) TermSum:T1 Addop:A2 Term:T3 {: RESULT=new SumTerm(T1, A2, T3); RESULT.setLine(T1left); :}
		|
			(SingleTerm) Term:T1 {: RESULT=new SingleTerm(T1); RESULT.setLine(T1left); :}
		;


Term ::=  (MulFactors) Term:T1 Muloper:M2 Factor:F3 {: RESULT=new MulFactors(T1, M2, F3); RESULT.setLine(T1left); :}
		|
		  (SingleFactor) Factor:F1 {: RESULT=new SingleFactor(F1); RESULT.setLine(F1left); :}
		;
		
		
Factor ::= (Var) Designator:d {: RESULT=new Var(d); RESULT.setLine(dleft); :} 
		|
			(FuncCallPars) Designator:func LPAREN ActualPars:A1 RPAREN {: RESULT=new FuncCallPars(func, A1); RESULT.setLine(funcleft); :}
		|
		 	(NumConst) NUMBER:N1 {: RESULT=new NumConst(N1); RESULT.setLine(N1left); :} 
		| 
			(CharConst) CHAR:C1 {: RESULT=new CharConst(C1); RESULT.setLine(C1left); :} 
		|
			(BoolConst) BOOL:B1 {: RESULT=new BoolConst(B1); RESULT.setLine(B1left); :} 
		|
			(NewArray) NEW Type:T1 LBRACE RBRACE {: RESULT=new NewArray(T1); RESULT.setLine(T1left); :}
		|
			(ExprInParens) LPAREN Expr:E1 RPAREN {: RESULT=new ExprInParens(E1); RESULT.setLine(E1left); :}
		;
		

 
Designator ::= (ASTDesignator) IDENT:name {: RESULT=new ASTDesignator(name); RESULT.setLine(nameleft); :} 
			|	
				(DesignatorArray)  IDENT:arr LBRACE Expr:E1 RBRACE {: RESULT=new DesignatorArray(arr, E1); RESULT.setLine(arrleft); :}
			;


Assignop ::= (Assignop) EQUAL {: RESULT=new Assignop(); :} ;


Relop ::= (CompEqual) EQ {: RESULT=new CompEqual(); :}
		|
		  (NotEqual) NEQ {: RESULT=new NotEqual(); :}
		| 
		  (GreaterThan) GT {: RESULT=new GreaterThan(); :}
		| 
		  (GtEqual) GTEQ {: RESULT=new GtEqual(); :}
		|
		  (LessThan) LT {: RESULT=new LessThan(); :}
		|
		  (LsEqual) LTEQ {: RESULT=new LsEqual(); :}
		;

Addop ::= (PlusOp) PLUS {: RESULT=new PlusOp(); :}
		|
		  (MinusOp) MINUS {: RESULT=new MinusOp(); :}
		;

		
Muloper ::= (Mulop) MUL {: RESULT=new Mulop(); :}
		|
		  (Divop) DIV {: RESULT=new Divop(); :}
		|
		  (Modop) MOD {: RESULT=new Modop(); :}
		;



BasicTypes ::= (ASTNumber) NUMBER:N1 {: RESULT=new ASTNumber(N1); RESULT.setLine(N1left); :}
			|
			(ASTBoolean) BOOL:B1 {: RESULT=new ASTBoolean(B1); RESULT.setLine(B1left); :}
			| 
			(ASTCharacter) CHAR:C1 {: RESULT=new ASTCharacter(C1); RESULT.setLine(C1left); :}
			;

