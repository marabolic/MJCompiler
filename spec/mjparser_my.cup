

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)  
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, ENUM, CONST, PRINT, READ, RETURN, VOID;
terminal DO, WHILE;
terminal LBRACE, RBRACE, SEMI, LPAREN, RPAREN, LBRACKET, RBRACKET, QMARK, COLON;

terminal PLUS, MINUS, MUL, DIV, MOD;
terminal EQ, NEQ, GT, GTEQ, LT, LTEQ;
terminal AND, OR, EQUAL, INC, DEC;
terminal COMMA, POINT;

terminal Integer NUMBER;
terminal String BOOL;
terminal Character CHAR;
terminal String IDENT;
terminal IF, ELSE;

nonterminal MethodDeclList, VarDecl, DeclList;
nonterminal FormalParamList, FormalParamDecl, FormPars, ActualPars, ActualParamList, RetType; 
nonterminal StatementList, Statement, Addop, Mulop, Assignop, Relop;
nonterminal Unmatched, Matched;
nonterminal DesignatorStatement, Operation;

nonterminal Program, ProgName, Designator, MethodDecl; 
nonterminal Type, Term, Expr, Factor; 


Program ::= (Program) PROG IDENT DeclList LBRACE MethodDeclList RBRACE ;

DeclList ::= (DeclList) DeclList VarDecl
			|
			(NoDecl) /* epsilon */
			;
			

	
VarDecl ::= (VarDecl) Type:varType IDENT:varName SEMI ;


MethodDeclList ::= (MethodDeclList) MethodDeclList MethodDecl
				|
					(NoMethodDecl)	/* epsilon */
				;
			
MethodDecl ::= (MethodDecl)	Type:retType IDENT:methName LPAREN FormPars RPAREN DeclList 
									LBRACE StatementList RBRACE ;


FormPars ::= (FormParams) FormalParamList
		|
			(NoFormParams)	/* epsilon */
		;
		
		
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl 
				|
					(SingleFormalParamDecl) FormalParamDecl
				;

FormalParamDecl ::= (FormalParamDecl) Type IDENT ;


Type ::= (Type) IDENT:typeName ;

StatementList ::= (StmtList) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;

Statement ::= (DesignatorStmt) DesignatorStatement SEMI
			| 
			  (PrintStmt) PRINT LPAREN Expr RPAREN SEMI
			|
			  (SurroundStmt) LBRACE StatementList RBRACE
			|
			  (ReturnExpr) RETURN Expr SEMI
			|
			  (ReturnNoExpr) RETURN SEMI
			;
			
DesignatorStatement ::= (DesignatorStmt) Designator:dest EQUAL Expr:e SEMI ;


Expr ::= (OpExpr) Expr Addop Term
		|
		 (TermExpr) Term
		;


Term ::=  (MulFactors) Term Mulop Factor
		|
		  (SingleFactor) Factor
		;
		
		
Factor ::= (NumConst) NUMBER 
		| 
			(CharConst) CHAR 
		|
			(BoolConst) BOOL 
		|
			(Var) Designator:d 
		|
			(FuncCall) Designator:func LPAREN ActualPars RPAREN
		;
		
ActualPars ::= (Actuals) ActualParamList
			|
			(NoActuals) /* epsilon */
			;
			
ActualParamList ::= (ActualParamList) ActualParamList COMMA Expr
				|
					(ActualParam) Expr
				;
 
Designator ::= (Designator) IDENT:name ;

Addop ::= (PlusOp) PLUS
		|
		  (MinusOp) MINUS
		;
		
Mulop ::= (Mulop) MUL
		|
		  (Divop) DIV
		|
		  (Modop) MOD
		;

Assignop ::= (Assignop) EQUAL ;

Relop ::= (CompEqual) EQ
		|
		  (NotEqual) NEQ
		| 
		  (GreaterThan) GT
		| 
		  (GtEqual) GTEQ
		|
		  (LessThan) LT
		|
		  (LsEqual) LTEQ
		;



